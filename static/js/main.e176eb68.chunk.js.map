{"version":3,"sources":["api/youtube.js","components/SearchBar.js","components/VideoDetails.js","components/VideoItem.js","components/VideoList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","SearchBar","searchHandler","useState","text","setText","Paper","elevation","style","padding","onSubmit","e","preventDefault","TextField","fullWidth","label","onChange","target","value","VideoDetails","video","videoSrc","id","videoId","height","frameBorder","width","title","src","Typography","variant","snippet","channelTitle","description","VideoItem","onVideoSelect","Grid","item","xs","display","alignItems","onClick","cursor","thumbnails","medium","url","alt","marginRight","VideoList","videos","listOfVideos","map","container","spacing","App","setVideos","selectedVideo","setSelectedVideo","useEffect","a","console","log","youtube","get","params","part","maxResults","key","q","response","data","items","justify-content","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e176eb68.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://www.googleapis.com/youtube/v3',\r\n    \r\n  });","import React,{useState} from 'react';\r\nimport {Paper,TextField} from '@material-ui/core';\r\n\r\nconst SearchBar=({searchHandler}) =>{\r\n    const[text,setText] =useState('');\r\n\r\n    const onSubmitHandler=(e)=>{\r\n        \r\n        e.preventDefault();\r\n        searchHandler(text);\r\n        setText('');\r\n      \r\n    } \r\n\r\n    return (\r\n        \r\n          <Paper elevation={6} style={{padding:'25px'}}>\r\n            <form onSubmit={onSubmitHandler}>\r\n                <TextField fullWidth label=\"Search Videos....\" onChange={(e)=>setText(e.target.value)}    />\r\n            </form>\r\n          </Paper>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n\r\nconst VideoDetails = ({ video }) => {\r\n  if (!video) return <h1>No Video Found. Please Search One Above.</h1>;\r\n\r\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n  return (\r\n    <>\r\n      <Paper elevation={6} style={{ height: \"50%\" }}>\r\n        <iframe\r\n          frameBorder=\"0\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          title=\"Video Player\"\r\n          src={videoSrc}\r\n        />\r\n      </Paper>\r\n      <Paper elevation={6} style={{ padding: \"15px\" }}>\r\n        <Typography variant=\"h4\">\r\n          {video.snippet.title}- {video.snippet.channelTitle}\r\n        </Typography>\r\n        <Typography variant=\"h4\">{video.snippet.channelTitle}</Typography>\r\n        <Typography variant=\"h4\">{video.snippet.description}</Typography>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default VideoDetails;\r\n","import React from \"react\";\r\nimport { Paper, Typography, Grid } from \"@material-ui/core\";\r\n\r\nconst VideoItem = ({ video, onVideoSelect }) => {\r\n  const getId = (id) => {\r\n    onVideoSelect(id);\r\n  };\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Paper\r\n        elevation={6}\r\n        style={{ display: \"flex\", alignItems: \"center\" }}\r\n        onClick={() => getId(video.id.videoId)}\r\n        style={{ cursor: \"pointer\" }}\r\n      >\r\n        <img\r\n          src={video.snippet.thumbnails.medium.url}\r\n          alt=\"thumbnail\"\r\n          style={{ marginRight: \"20px\" }}\r\n        />\r\n        <Typography variant=\"h4\">{video.snippet.title}</Typography>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default VideoItem;\r\n","import React from 'react';\r\nimport VideoItem from './VideoItem';\r\nimport {Grid} from '@material-ui/core';\r\n\r\nconst VideoList=({videos, onVideoSelect}) =>{\r\n    \r\n    const listOfVideos = videos.map((video)=> <VideoItem video={video}  onVideoSelect={onVideoSelect}/>)\r\n    return (\r\n        <Grid container spacing={10}>\r\n          {listOfVideos}\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default VideoList;","import React,{useState,useEffect}from 'react';\nimport {Grid} from '@material-ui/core';\nimport youtube from './api/youtube';\nimport { SearchBar, VideoDetails,VideoList } from './components';\n\n\nconst  App=() =>{\n\n  const [videos,setVideos] = useState([]);\n  const [selectedVideo,setSelectedVideo] =useState(null);\n\n  useEffect(() => {\n    \n      searchHandler('javascript tutorial')\n    \n  }, [])\n\n  const searchHandler= async (text)=>{\n    console.log(text)  \n    try{\n        const response = await youtube.get('search',{\n        params:{\n          part:'snippet',\n          maxResults:5,\n          key:'AIzaSyBzbQ5EUbjK9L5ylgLo4hdybhvgMRqHc3U',\n          q: text\n         }});\n\n        console.log(response.data.items)\n         \n        setVideos(response.data.items);\n        setSelectedVideo(response.data.items[0])\n        \n    }catch(err){\n      console.log(err)\n    }\n        \n  }\n  const onVideoSelect =(id)=>{\n      const selectedVideo =videos.find(video=>video.id.videoId === id );\n      setSelectedVideo(selectedVideo);\n  }\n\n  return (\n    <Grid justify-content=\"center\" container spacing={10}>\n       <Grid item xs={12}>\n          <Grid container spacing={10}>\n              <Grid item xs={12}>\n                  <SearchBar  searchHandler={searchHandler}/>\n              </Grid>\n              <Grid item xs={8}>\n                  <VideoDetails video={selectedVideo} />\n              </Grid>\n              <Grid item xs={4}>\n                  <VideoList videos={videos} onVideoSelect={onVideoSelect}/>\n              </Grid>\n          </Grid>\n\n       </Grid>\n\n    </Grid>\n  )\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}